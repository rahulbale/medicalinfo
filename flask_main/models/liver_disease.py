import numpy as npimport pandas as pdfrom sklearn.preprocessing import StandardScalerfrom sklearn.model_selection import train_test_split,RandomizedSearchCVfrom sklearn.linear_model import LogisticRegressionfrom sklearn.utils import resamplefrom sklearn.svm import SVCimport joblibdf=pd.read_csv('../dataset/indian_liver_patient.csv')print(df.head())mean_value=df['Albumin_and_Globulin_Ratio'].mean()df['Albumin_and_Globulin_Ratio']=df['Albumin_and_Globulin_Ratio'].fillna(mean_value)df['Gender']=df['Gender'].map({'Female':0,'Male':1})def correlation(dataset, threshold):    col_corr = set()  # Set of all the names of correlated columns    corr_matrix = dataset.corr()    for i in range(len(corr_matrix.columns)):        for j in range(i):            if (corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value                colname = corr_matrix.columns[i]  # getting the name of column                col_corr.add(colname)    return col_corrcorr_features = correlation(df, 0.70)print(corr_features)df.drop(['Albumin', 'Aspartate_Aminotransferase', 'Direct_Bilirubin'],axis=1,inplace=True)print(df.Dataset.value_counts())minority=df[df.Dataset==2]majority=df[df.Dataset==1]print("minority size",minority.shape)print("majority size",majority.shape)min_upsample=resample(minority,replace=True,n_samples=majority.shape[0])print("minority upsample size",min_upsample.shape)df=pd.concat([min_upsample,majority],axis=0)print(df.Dataset.value_counts())df['Dataset']=df['Dataset'].map({1:0,2:1})X=df.drop(['Dataset'],axis=1)y=df['Dataset']print(df.info())scale=StandardScaler()X=scale.fit_transform(X)X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=45)print("Train dataset",X_train.shape,y_train.shape)print("Test dataset",X_test.shape,y_test.shape)sv_modal = SVC()parameters = {    'C': np.arange(1, 100 + 1, 1).tolist(),    'kernel': ['linear', 'rbf'],  # precomputed,'poly', 'sigmoid'    'degree': np.arange(0, 100 + 0, 1).tolist(),    'gamma': np.arange(0.0, 10.0 + 0.0, 0.1).tolist(),}sv_CV_modal = RandomizedSearchCV(n_iter=10, estimator=sv_modal,                                 param_distributions=parameters,                                 n_jobs=4, iid=True, refit=True,                                 cv=5, verbose=1, pre_dispatch='2*n_jobs'                                 )  # scoring = 'accuracy'sv_CV_modal.fit(X_train, y_train)"""log_reg=LogisticRegression()param_grid_log = {'penalty' : ['l2'],                  'C': [0.1,1.0,10,20,100],                  'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],                    'max_iter':[10000]                 }log_reg_CV = RandomizedSearchCV(estimator=log_reg, param_distributions=param_grid_log, cv=10,                             n_iter=10,scoring='neg_mean_squared_error',random_state=5,n_jobs=1,verbose=False)log_reg_CV.fit(X_train, y_train)"""joblib.dump(sv_CV_modal,"liver_model")